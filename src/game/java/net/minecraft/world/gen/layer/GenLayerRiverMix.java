package net.minecraft.world.gen.layer;

import net.minecraft.world.biome.BiomeGenBase;

/**+
 * This portion of EaglercraftX contains deobfuscated Minecraft 1.8 source code.
 * 
 * Minecraft 1.8.8 bytecode is (c) 2015 Mojang AB. "Do not distribute!"
 * Mod Coder Pack v9.18 deobfuscation configs are (c) Copyright by the MCP Team
 * 
 * EaglercraftX 1.8 patch files (c) 2022-2024 lax1dude, ayunami2000. All Rights Reserved.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 */
public class GenLayerRiverMix extends GenLayer {
	private GenLayer biomePatternGeneratorChain;
	private GenLayer riverPatternGeneratorChain;

	public GenLayerRiverMix(long parLong1, GenLayer parGenLayer, GenLayer parGenLayer2) {
		super(parLong1);
		this.biomePatternGeneratorChain = parGenLayer;
		this.riverPatternGeneratorChain = parGenLayer2;
	}

	/**+
	 * Initialize layer's local worldGenSeed based on its own
	 * baseSeed and the world's global seed (passed in as an
	 * argument).
	 */
	public void initWorldGenSeed(long i) {
		this.biomePatternGeneratorChain.initWorldGenSeed(i);
		this.riverPatternGeneratorChain.initWorldGenSeed(i);
		super.initWorldGenSeed(i);
	}

	/**+
	 * Returns a list of integer values generated by this layer.
	 * These may be interpreted as temperatures, rainfall amounts,
	 * or biomeList[] indices based on the particular GenLayer
	 * subclass.
	 */
	public int[] getInts(int i, int j, int k, int l) {
		int[] aint = this.biomePatternGeneratorChain.getInts(i, j, k, l);
		int[] aint1 = this.riverPatternGeneratorChain.getInts(i, j, k, l);
		int[] aint2 = IntCache.getIntCache(k * l);

		for (int i1 = 0; i1 < k * l; ++i1) {
			if (aint[i1] != BiomeGenBase.ocean.biomeID && aint[i1] != BiomeGenBase.deepOcean.biomeID) {
				if (aint1[i1] == BiomeGenBase.river.biomeID) {
					if (aint[i1] == BiomeGenBase.icePlains.biomeID) {
						aint2[i1] = BiomeGenBase.frozenRiver.biomeID;
					} else if (aint[i1] != BiomeGenBase.mushroomIsland.biomeID
							&& aint[i1] != BiomeGenBase.mushroomIslandShore.biomeID) {
						aint2[i1] = aint1[i1] & 255;
					} else {
						aint2[i1] = BiomeGenBase.mushroomIslandShore.biomeID;
					}
				} else {
					aint2[i1] = aint[i1];
				}
			} else {
				aint2[i1] = aint[i1];
			}
		}

		return aint2;
	}
}